

CHIP Eq16 {
    IN a[16], b[16];
    OUT out;

    PARTS:
    /* xnor is a one bit = operator */

    Xor(a=a[0], b=b[0], out=nb0);
    Not(in=nb0, out=b0);

    Xor(a=a[1], b=b[0], out=nb1);
    Not(in=nb1, out=b1);

    Xor(a=a[2], b=b[0], out=nb2);
    Not(in=nb2, out=b2);

    Xor(a=a[3], b=b[0], out=nb3);
    Not(in=nb3, out=b3);

    Xor(a=a[4], b=b[0], out=nb4);
    Not(in=nb4, out=b4);

    Xor(a=a[5], b=b[0], out=nb5);
    Not(in=nb5, out=b5);

    Xor(a=a[6], b=b[0], out=nb6);
    Not(in=nb6, out=b6);

    Xor(a=a[7], b=b[0], out=nb7);
    Not(in=nb7, out=b7);

    Xor(a=a[8], b=b[0], out=nb8);
    Not(in=nb8, out=b8);

    Xor(a=a[9], b=b[0], out=nb9);
    Not(in=nb9, out=b9);

    Xor(a=a[10], b=b[10], out=nb10);
    Not(in=nb10, out=b10);

    Xor(a=a[11], b=b[11], out=nb11);
    Not(in=nb11, out=b11);

    Xor(a=a[12], b=b[12], out=nb12);
    Not(in=nb12, out=b12);

    Xor(a=a[13], b=b[13], out=nb13);
    Not(in=nb13, out=b13);

    Xor(a=a[14], b=b[14], out=nb14);
    Not(in=nb14, out=b14);

    Xor(a=a[15], b=b[15], out=nb15);
    Not(in=nb15, out=b15);


    /* all these levels is slow */
    And(a=b0, b=b1, out=x0);
    And(a=b2, b=b3, out=x1);
    And(a=b4, b=b5, out=x2);
    And(a=b6, b=b7, out=x3);
    And(a=b8, b=b9, out=x4);
    And(a=b10, b=b11, out=x5);
    And(a=b12, b=b13, out=x6);
    And(a=b14, b=b15, out=x7);

    And(a=x0, b=x1, out=y0);
    And(a=x2, b=x3, out=y1);
    And(a=x4, b=x5, out=y2);
    And(a=x6, b=x7, out=y3);

    And(a=y0, b=y1, out=z0);
    And(a=y2, b=y3, out=z1);

    And(a=z0, b=z1, out=out);
}
