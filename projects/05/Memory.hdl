// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    /* ram      0x0    - 0x3FFF   0b_000 0000 0000 0000 - 0b_011 1111 1111 1111 */
    /* screen   0x4000 - 0x5FFF = 0b_100 0000 0000 0000 - 0b_101 1111 1111 1111 */
    /* keyboard 0x6000 - 0x7FFF = 0b_110 0000 0000 0000 - 0b_111 1111 1111 1111 */

    /* in ram space      = 0b_0xx xxxx xxxx xxxx
                         = !address[14] */

    /* in screen space   = 0b_10x xxxx xxxx xxxx 
                         = address[14] && !address[13] */

    /* in keyboard space = 0b_11x xxxx xxxx xxxx 
                         = address[14] && address[13] */
    
    /* where does address point to? */
    Not(in=address[13], out=notAddr13);
    Not(in=address[14], out=inRAMSpace);
    And(a=address[14], b=notAddr13, out=inScreenSpace);
    And(a=address[14], b=address[13], out=inKeyboardSpace);


    /* RAM */
    And(a=inRAMSpace, b=load, out=ramLoad);
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);


    /* Screen */
    And(a=inScreenSpace, b=load, out=screenLoad);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);


    /* Keyboard */
    Keyboard(out=keyboard);

    /*
    A    B        C            
    inKB inScreen inRam   sel  
    1    0        0       11
    1    0        0       10
    0    1        0       01
    0    0        1       00


    sel[1] = inKB
    sel[0] = inScreen 
    */


    /*        00        01           10             11 */
    Mux4Way16(a=ramOut, b=screenOut, c=keyboard, d=keyboard, sel[1]=inKeyboardSpace, sel[0]=inScreenSpace, out=out);
}
